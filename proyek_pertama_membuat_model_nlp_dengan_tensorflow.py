# -*- coding: utf-8 -*-
"""Proyek Pertama : Membuat Model NLP dengan TensorFlow

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fih8o-56SZu9kFpiJWVzhKXIwdXro-DW

Nama : Fakhri Maulana Nurjaman

Email : fakhrimaulana046@upi.edu

Deskripsi

data yang digunakan adalah data dari https://www.kaggle.com/hassanamin/atis-airlinetravelinformationsystem
"""

from google.colab import files
files.upload()

import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('atis_intents.csv', names=['Label', 'Sequence'])
df.head()

print(df.Label.unique())
print()
print(len(df.Label.unique()))

df.info()

df.groupby("Label").count()

categori = pd.get_dummies(df.Label)
new_df = pd.concat([df, categori], axis=1)
new_df = new_df.drop(columns='Label')
new_df

sentence

sentence = new_df.Sequence.values
label = new_df[['atis_flight', 'atis_flight_time', 'atis_airfare', 'atis_aircraft', 
                'atis_ground_service', 'atis_airport', 'atis_airline', 'atis_distance',
                'atis_abbreviation', 'atis_ground_fare', 'atis_quantity', 'atis_city',
                'atis_flight_no', 'atis_capacity', 'atis_flight#atis_airfare', 'atis_meal',
                'atis_restriction', 'atis_airline#atis_flight_no', 'atis_ground_service#atis_ground_fare',
                'atis_airfare#atis_flight_time', 'atis_cheapest', 'atis_aircraft#atis_flight#atis_flight_no']].values

# Bagi data latih dan data test
sentence_latih, sentence_test, label_latih, label_test = train_test_split(sentence, label, test_size=0.2)

#Tokenisasi
tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(sentence_latih)
tokenizer.fit_on_texts(sentence_test)

sequence_latih = tokenizer.texts_to_sequences(sentence_latih)
sequence_test = tokenizer.texts_to_sequences(sentence_test)

#padding
padded_latih = pad_sequences(sequence_latih)
padded_test = pad_sequences(sequence_test)

padded_test

print(tokenizer.word_index)

model = tf.keras.models.Sequential([tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
                                    tf.keras.layers.LSTM(64),
                                    tf.keras.layers.Dense(128, activation='relu'),
                                    tf.keras.layers.Dense(64, activation='relu'),
                                    tf.keras.layers.Dense(32, activation='relu'),
                                    tf.keras.layers.Dense(22, activation='softmax'),
                                    tf.keras.layers.Dropout(0.01)])

model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('accuracy')>0.95):
      print("\nAkurasi telah mencapai > 95%!")
      self.model.stop_training = True

callback = myCallback()

history = model.fit(padded_latih, label_latih,
                    callbacks=[callback],
                    epochs=30,
                    validation_data=(padded_test, label_test),
                    batch_size=128,
                    verbose=2)

model.summary()

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

x = 'is there a delta flight from denver to san francisco'
tokenizer.fit_on_texts(x)
sequence_x = tokenizer.texts_to_sequences([x])
padding_x = pad_sequences(sequence_x)
sequence_x

y_pred = model.predict(padding_x)
y_test_class = np.argmax(label_test, axis=1)
y_pred_class = np.argmax(y_pred, axis=1)

y_pred

y_pred_class